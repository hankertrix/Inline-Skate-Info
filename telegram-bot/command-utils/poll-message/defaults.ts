// The module containing the defaults for the poll message

import {
  type PollConfig,
  type FormatOptions,
  type IsSameNameFunc,
  type CreatePollMessagePrompts,
  type CreatePollMessageConfig,
  POLL_TYPES,
  NUMBERING_STYLES,
} from "./config";
import { generateInlineKeyboard } from "../../bot-utils";


// The constant representing the standard spacing to be used
// in the poll message
export const DEFAULT_POLL_SPACING = "\n\n";

// The default tag string
export const DEFAULT_TAG_STRING = "âœ…"


// The default format options
export const DEFAULT_FORMAT_OPTIONS: FormatOptions = {

  // The {people} in the formatStr property will be substituted
  // with the string generated by substituting the zero, one, and
  // moreThanOne properties.

  // The {number} in the zero, one and default properties
  // will be substituted with the actual number of people who
  // responded to the poll option.

  // The {maxEntries} in the zero, one and default properties
  // will be substituted with the maximum number of people
  // allowed on that particular poll option

  // The options for the individual options of the poll
  pollOptionHeader: {

    // The format string for the header of a single poll option
    // The {pollOption} in the formatStr will be substituted with
    // the poll option.
    // The formatStr should start with the poll option,
    // otherwise the callback query won't work unless the regular expression
    // in the getPollOptionSegment function is changed as the current
    // regular expression matches from the start of the line.
    formatStr: "{pollOption} {people}",

    // Whether to bold the header or not.
    // The poll option header should be bolded.
    bold: true,

    // The string to display when there is more than one person.
    // This is also the string that will be used if no string is given
    // for zero and one.
    default: "({number}ðŸ‘¥)",

    // The string to display when there is no one
    zero: "",

    // The string to display when there is one person
    one: null,
  },

  // The options for the message footer
  messageFooter: {

    // The format string for the header of the poll message.
    formatStr: "ðŸ‘¥ {people} responded",

    // Whether to bold the message footer or not.
    // The message footer should not be bolded.
    bold: false,

    // The string to display when there is more than one person.
    // This is also the string that will be used if no string is given
    // for zero and one.
    default: "{number} people",

    // The string to display when there is no one
    zero: "Nobody",

    // The string to display when there is one person
    one: "1 person",
  },
} as const;


// The default function to check if two names are the same
export function defaultIsSameNameFunc(
  ...[encounteredName, givenName]: Parameters<IsSameNameFunc>
): ReturnType<IsSameNameFunc> {

  // Returns if they are equal or not
  return encounteredName === givenName;
}


// The default poll configuration
export const DEFAULT_POLL_CONFIG: Required<PollConfig> = {
  pollOptions: ["Coming"],
  pollType: POLL_TYPES.DEFAULT,
  pollSpacing: DEFAULT_POLL_SPACING,
  maxEntriesList: [],
  numberingStyle: NUMBERING_STYLES.NONE,
  formatOptions: DEFAULT_FORMAT_OPTIONS,
  preserveLines: false,
  showRemaining: false,
  tagString: DEFAULT_TAG_STRING,
  tagAll: false,
  maxNumberOfEntries: Infinity,
  isSingleChoicePoll: false,
  isSameNameFunc: defaultIsSameNameFunc,
  inlineKeyboardGenerator: generateInlineKeyboard,
} as const;




// The default configuration for the create poll message scene

// The message to display for the step to get the numbering style.
// The {numberingStyle} will be substituted with the actual list
// of numbering styles when the message is sent.
export const DEFAULT_NUMBERING_STYLES_MSG = `Please select a numbering style by copying and pasting a full line from the list below or by using the reply keyboard.\n\n{numberingStyles}\n`;

// The message to display for the step to get whether the user wants a poll
// with only one choice
export const DEFAULT_SINGLE_ANSWER_POLL_MSG = `Please answer yes or no either by typing it out, or using the reply keyboard.`;

// The poll option message
export const DEFAULT_POLL_OPTION_MSG = `Please enter another poll option.

Use the /done command to get the bot to send the poll message.`;


// The incomplete data message for the poll message creation scene
export const DEFAULT_INCOMPLETE_DATA_MESSAGE = `The poll message is still missing some required data for it to be generated.

Please continue the poll message creation process or use the /cancel command to cancel the creation of the poll message.`;


// The default list of prompts for the poll message scene
export const DEFAULT_CREATE_POLL_MESSAGE_PROMPTS: CreatePollMessagePrompts = [

  // The prompt for the first step
  "Please enter the message for the poll.",

  // The prompts for the second step
  {
    success: {
      prompt: "Do you want to create a poll message with only one choice?",
      placeholder: "Answer either yes or no...",
    },
    failure: {
      prompt: DEFAULT_NUMBERING_STYLES_MSG,
      placeholder: "Choose a numbering style...",
    },
  },

  // The prompts for the third step
  {
    success: "Please enter the first poll option.",
    failure: {
      prompt: DEFAULT_SINGLE_ANSWER_POLL_MSG,
      placeholder: "Answer either yes or no...",
    }
  },

  // The prompts for the fourth step
  { success: DEFAULT_POLL_OPTION_MSG, failure: "Please enter a poll option." },
] as const;


// The default poll message configuration
export const DEFAULT_CREATE_POLL_MSG_CONFIG: Required<
  CreatePollMessageConfig
> = {
  ...DEFAULT_POLL_CONFIG,
  pollOptions: [],
  prompts: DEFAULT_CREATE_POLL_MESSAGE_PROMPTS,
  incompleteDataMessage: DEFAULT_INCOMPLETE_DATA_MESSAGE,
  additionalOptionsFuncList: [],
  additionalOptionsIndex: 0,
} as const;
