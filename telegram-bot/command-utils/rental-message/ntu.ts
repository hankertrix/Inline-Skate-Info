// Module to create the rental message for NTU

import * as utils from "../../utils";
import {
  type RentalMessageCallbackHandler,
  type RentalMessageHandler,
  defaultCallbackHandler,
} from ".";
import {
  type FormatOptions,
  type PollConfig,
  NUMBERING_STYLES,
  generatePollMessage,
} from "../poll-message";
import { deleteMessages } from "../../bot-utils";
import { getUpcomingTrainingDates } from "../training-message/utils";
import { trainingDates } from "../training-message/ntu";
import { DEFAULT_RENTAL_MSG_CONFIG } from "./defaults";

// The rental options
const RENTAL_OPTIONS_AND_MAX_AMOUNT = new Map([
  ["Size 37, $7", 1],
  ["Sizes 38 - 42, $7", 4],
  ["Size 44, $7", 1],
]);

// The format options for the NTU rental message function
const RENTAL_MSG_FORMAT_OPTIONS: FormatOptions = {
  //

  // The {people} in the formatStr property will be substituted
  // with the string generated by substituting the zero, one, and
  // moreThanOne properties.

  // The {number} in the zero, one and default properties
  // will be substituted with the actual number of people who
  // responded to the poll option.

  // The {maxEntries} in the zero, one and default properties
  // will be substituted with the maximum number of people
  // allowed on that particular poll option

  // The options for the individual options of the poll
  pollOptionHeader: {
    //

    // The format string for the header of a single poll option
    // The {pollOption} in the formatStr will be substituted with
    // the poll option.
    // The formatStr should start with the poll option,
    // otherwise the callback query won't work unless the regular expression
    // in the getPollOptionSegment function is changed as the current
    // regular expression matches from the start of the line.
    formatStr: "{pollOption} {people}",

    // Whether to bold the header or not.
    // The poll option header should be bolded.
    bold: true,

    // The string to display when there is more than one person.
    // This is also the string that will be used if no string is given
    // for zero and one.
    default: "({number}/{maxEntries} pairs left)",

    // The string to display when there is no one
    zero: null,

    // The string to display when there is one person
    one: null,
  },

  // The options for the message footer.
  // The message footer is empty for the rental message
  messageFooter: {
    //

    // The format string for the header of the poll message.
    formatStr: "",

    // Whether to bold the message footer or not.
    // The message footer should not be bolded.
    bold: false,

    // The string to display when there is more than one person.
    // This is also the string that will be used if no string is given
    // for zero and one.
    default: "",

    // The string to display when there is no one
    zero: "",

    // The string to display when there is one person
    one: "",
  },
};

// The rental message configuration
const RENTAL_MSG_CONFIG: Required<PollConfig> = {
  ...DEFAULT_RENTAL_MSG_CONFIG,
  pollOptions: Array.from(RENTAL_OPTIONS_AND_MAX_AMOUNT.keys()),
  maxEntriesList: Array.from(RENTAL_OPTIONS_AND_MAX_AMOUNT.values()),
  numberingStyle: NUMBERING_STYLES.DASH,
  formatOptions: RENTAL_MSG_FORMAT_OPTIONS,
  maxNumberOfEntries: 1,
} as const;

// The rental message
const RENTAL_MSG =
  "{time}" +
  "\n" +
  "Add your name if you want skate rentals. " +
  "The prices shown are for the whole session. " +
  "Please either scan the PayNow QR code above " +
  `or PayNow the amount to ${process.env.NTU_TREASURER_PHONE_NUMBER}. ` +
  `Press the ${RENTAL_MSG_CONFIG.tagString} button ` +
  "to indicate that you have paid. " +
  "First come first served basis!!!";

// Function to create the time portion of the rental message
function createRentalMessagePortion(
  rentalMsg: string,
  trainingDates: string[]
) {
  //

  // Get the upcoming training date
  const upcomingTrainingDate = getUpcomingTrainingDates(trainingDates) as Date;

  // Gets the day of the week
  const dayOfTheWeek = Intl.DateTimeFormat("en-SG", {
    weekday: "long",
  }).format(upcomingTrainingDate);

  // Gets the date string
  const dateStr = Intl.DateTimeFormat("en-SG", {
    month: "2-digit",
    day: "2-digit",
  }).format(upcomingTrainingDate);

  // The time portion of the rental message
  const timePortion = `${dayOfTheWeek} rentals! (${dateStr})`;

  // Add the time portion to the rental message and return the rental message
  return utils.strFormat(rentalMsg, { time: timePortion });
}

// Function to create the rental message
// This function is very similar to the generatePollMessage function
// in the poll message module.
function generateRentalMessage(
  message: string,
  pollConfig: Required<PollConfig> = RENTAL_MSG_CONFIG
) {
  //

  // Return the result of the generatePollMessage function
  return generatePollMessage(message, pollConfig);
}

// The handler for the rental message command
export async function handler(
  ...[ctx, message]: Parameters<RentalMessageHandler>
): ReturnType<RentalMessageHandler> {
  //

  // Generates the rental message
  const { userMessage, callback } = generateRentalMessage(message);

  // If the user's message isn't empty
  if (userMessage) {
    //

    // Call the callback function with the user's message
    await callback(ctx, userMessage);

    // Deletes the user's message
    return await deleteMessages(ctx, ctx.message.message_id);
  }

  // Otherwise, create the rental message portion
  const rentalMsgPortion = createRentalMessagePortion(
    RENTAL_MSG,
    trainingDates
  );

  // Sends the QR code
  await ctx.replyWithPhoto({
    source: "./static/ntu/rentals-paynow-qr-code.jpg",
  });

  // Calls the callback function with the default rental message portion
  await callback(ctx, rentalMsgPortion);

  // Deletes the user's message
  return await deleteMessages(ctx, ctx.message.message_id);
}

// The handler for the callback query
export async function callbackHandler(
  ...[ctx, callbackQuery, messageText]: Parameters<RentalMessageCallbackHandler>
): ReturnType<RentalMessageCallbackHandler> {
  //

  // If the text of the callback query is not
  // one of the poll options, and is not the tag string,
  // exit the function.
  //
  // This is to prevent the bot from screwing up old
  // rental messages that used a custom callback
  // handler.
  if (
    !RENTAL_MSG_CONFIG.pollOptions.includes(callbackQuery.data) &&
    callbackQuery.data !== RENTAL_MSG_CONFIG.tagString
  )
    return;

  // Calls the default callback handler with the
  // poll configuration object
  return await defaultCallbackHandler(
    ctx,
    callbackQuery,
    messageText,
    RENTAL_MSG_CONFIG
  );
}

// The help text for the NTU command
export const help =
  "To use the /rental_msg command, " +
  "simply type the command and the rental message " +
  "will be sent to the group." +
  "\n\n" +
  "If you would like to change the rental message to a custom one, " +
  "provide the rental message after you have typed the command, like this:" +
  "\n" +
  `${utils.monospace(
    `/rental_msg ${utils.stripHtml("<custom rental message (optional)>")}`
  )}`;
