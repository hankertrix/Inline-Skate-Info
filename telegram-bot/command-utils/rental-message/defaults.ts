// The defaults for the rental message

import {
  type CreatePollMessagePrompts,
  type FormatOptions,
  type PollConfig,
  type CreatePollMessageConfig,
  type IsSameNameFunc,
  type AdditionalOptionsFunction,
  DEFAULT_NUMBERING_STYLES_MSG,
  DEFAULT_SINGLE_CHOICE_POLL_MSG,
  POLL_TYPES,
  DEFAULT_POLL_CONFIG,
  DEFAULT_TAG_STRING,
  DEFAULT_INCOMPLETE_DATA_MESSAGE,
} from "../poll-message";
import { removeCommand, promptUserForInput } from "../../bot-utils";
import { regexEscape } from "../../utils";
import { generateRentalMsgInlineKeyboardFunc } from "./utils";

// The rental option message
const RENTAL_OPTION_MESSAGE = `Please enter another rental option.

Use the /done command to get the bot to send the rental message.`;


// The default prompts for the create rental message function
const DEFAULT_CREATE_RENTAL_MSG_PROMPTS: CreatePollMessagePrompts = [

  // The prompt for the first step
  "Please enter the rental message.",

  // The prompts for the second step
  {
    success: {
      prompt: "Do you want to restrict your rentals to only one per person?",
      placeholder: "Answer either yes or no...",
    },
    failure: {
      prompt: DEFAULT_NUMBERING_STYLES_MSG,
      placeholder: "Choose a numbering style...",
    },
  },

  // The prompts for the third step
  {
    success: "Please enter the first rental option.",
    failure: {
      prompt: DEFAULT_SINGLE_CHOICE_POLL_MSG,
      placeholder: "Answer either yes or no...",
    },
  },

  // The prompts for the third step
  {
    success: RENTAL_OPTION_MESSAGE,
    failure: "Please enter a rental option.\n\nUse the /done command to get the bot to send the rental message."
  }
] as const;


// The default format options for the create rental message function
const DEFAULT_RENTAL_MSG_FORMAT_OPTIONS: FormatOptions = {

  // The {people} in the formatStr property will be substituted
  // with the string generated by substituting the zero, one, and
  // moreThanOne properties.

  // The {number} in the zero, one and default properties
  // will be substituted with the actual number of people who
  // responded to the poll option.

  // The {maxEntries} in the zero, one and default properties
  // will be substituted with the maximum number of people
  // allowed on that particular poll option

  // The options for the individual options of the poll
  pollOptionHeader: {

    // The format string for the header of a single poll option
    // The {pollOption} in the formatStr will be substituted with
    // the poll option.
    // The formatStr should start with the poll option,
    // otherwise the callback query won't work unless the regular expression
    // in the getPollOptionSegment function is changed as the current
    // regular expression matches from the start of the line.
    formatStr: "{pollOption} {people}",

    // Whether to bold the header or not.
    // The poll option header should be bolded.
    bold: true,

    // The string to display when there is more than one person.
    // This is also the string that will be used if no string is given
    // for zero and one.
    default: "({number}/{maxEntries})",

    // The string to display when there is no one
    zero: null,

    // The string to display when there is one person
    one: null
  },

  // The options for the message footer.
  // The message footer is empty for the rental message
  messageFooter: {

    // The format string for the header of the poll message.
    formatStr: "",

    // Whether to bold the message footer or not.
    // The message footer should not be bolded.
    bold: false,

    // The string to display when there is more than one person.
    // This is also the string that will be used if no string is given
    // for zero and one.
    default: "",

    // The string to display when there is no one
    zero: "",

    // The string to display when there is one person
    one: ""
  }
};


// The default rental message configuration
export const DEFAULT_RENTAL_MSG_CONFIG: Required<PollConfig> = {
  ...DEFAULT_POLL_CONFIG,
  pollOptions: [],
  pollType: POLL_TYPES.RENTAL,
  formatOptions: DEFAULT_RENTAL_MSG_FORMAT_OPTIONS,
  preserveLines: true,
  showRemaining: true,
  tagAll: true,
  isSameNameFunc: defaultIsSameNameFunc,
  inlineKeyboardGenerator: generateRentalMsgInlineKeyboardFunc(
    DEFAULT_TAG_STRING
  ),
} as const;


// The regular expression the get the maximum number of entries
// from the user
const promptForMaxEntriesRegex = /\d+/;


// The regular expression to remove the tag string from the name
const removeTagStringRegex = new RegExp(
  `${regexEscape(DEFAULT_TAG_STRING)}$`
);


// The function to check if two names are the same
export function defaultIsSameNameFunc(
  ...[encounteredName, givenName]: Parameters<IsSameNameFunc>
): ReturnType<IsSameNameFunc> {

  // Remove the tag string from the encountered name, trims it
  // and returns if the encountered name and the given name are the same
  return encounteredName.replace(
    removeTagStringRegex, ""
  ).trim() === givenName;
}


// The function to prompt the user for the maximum number of entries
export async function promptForMaxEntries(
  ...[ctx, message, state]: Parameters<AdditionalOptionsFunction>
): ReturnType<AdditionalOptionsFunction> {

  // Gets the message from the user
  const msg = removeCommand(message);

  // Tries to pull out the numbers in the message
  const maxEntriesMatch = msg.match(promptForMaxEntriesRegex);

  // If there are no matches
  if (!maxEntriesMatch) {

    // Asks the user for the maximum number of entries for the rental option
    // and exit the function
    await promptUserForInput(
      ctx, "Please enter the number of available rentals for this option."
    );

    // Return false to indicate the function failed
    // to get the required information
    return false;
  }

  // Otherwise, get the number of entries from the match object
  const maxEntries = parseInt(maxEntriesMatch[0]);

  // If the maximum number of entries has not been initialised in the state
  if (!Array.isArray(state.pollConfig.maxEntriesList)) {

    // Initialise the maximum number of entries with the given one
    state.pollConfig.maxEntriesList = [maxEntries];
  }

  // Otherwise, add the maximum number of entries to the list
  else state.pollConfig.maxEntriesList.push(maxEntries);

  // Returns true to indicate that the function successfully obtained
  // the required information
  return true;
}


// The default rental message options
export const DEFAULT_CREATE_RENTAL_MSG_CONFIG: Required<CreatePollMessageConfig> = {
  ...DEFAULT_RENTAL_MSG_CONFIG,
  prompts: DEFAULT_CREATE_RENTAL_MSG_PROMPTS,
  incompleteDataMessage: DEFAULT_INCOMPLETE_DATA_MESSAGE,
  additionalOptionsFuncList: [
    promptForMaxEntries
  ],
  additionalOptionsIndex: 0
} as const;
